Option Explicit
Option Compare Text

' =============================
' VARIÁVEIS GLOBAIS
' =============================
Public reason_code_id As Integer
Public action_item_id As Integer

' =============================
' FUNÇÕES DE TRATAMENTO FEUIL2
' =============================

Private Sub Action_item_owner_layout(ByVal column_target As Long, ByVal Dlig As Long)
    With Feuil2.Range(Feuil2.Cells(3, column_target), Feuil2.Cells(Dlig, column_target))
        .Validation.Delete
        .Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertWarning, Operator:=xlBetween, Formula1:="=Function"
        .Validation.IgnoreBlank = True
        .Validation.InCellDropdown = True
        .Validation.InputTitle = ""
        .Validation.ErrorTitle = ""
        .Validation.InputMessage = ""
        .Validation.ErrorMessage = ""
        .Validation.ShowInput = True
        .Validation.ShowError = False
        .VerticalAlignment = xlTop
        .WrapText = True
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = False
    End With
End Sub

Private Sub Reason_code_layout(ByVal column_target As Long, ByVal Dlig As Long)
    With Feuil2.Range(Feuil2.Cells(3, column_target), Feuil2.Cells(Dlig, column_target))
        .Validation.Delete
        .Validation.Add Type:=xlValidateList, AlertStyle:=xlValidAlertWarning, Operator:=xlBetween, Formula1:="=DELAY_REASON"
        .Validation.IgnoreBlank = True
        .Validation.InCellDropdown = True
        .Validation.InputTitle = ""
        .Validation.ErrorTitle = ""
        .Validation.InputMessage = ""
        .Validation.ErrorMessage = ""
        .Validation.ShowInput = True
        .Validation.ShowError = True
    End With
End Sub

Private Sub priority_level(ByVal column_target As Long, ByVal Dlig As Long)
    With Feuil2.Range(Feuil2.Cells(3, column_target), Feuil2.Cells(Dlig, column_target))
        .HorizontalAlignment = xlCenter
        .FormatConditions.AddColorScale ColorScaleType:=3
        .FormatConditions(.FormatConditions.Count).SetFirstPriority
        .FormatConditions(1).ColorScaleCriteria(1).Type = xlConditionValueNumber
        .FormatConditions(1).ColorScaleCriteria(1).Value = 1
        .FormatConditions(1).ColorScaleCriteria(1).FormatColor.Color = 255
        .FormatConditions(1).ColorScaleCriteria(2).Type = xlConditionValueNumber
        .FormatConditions(1).ColorScaleCriteria(2).Value = 2
        .FormatConditions(1).ColorScaleCriteria(2).FormatColor.Color = 49407
        .FormatConditions(1).ColorScaleCriteria(3).Type = xlConditionValueNumber
        .FormatConditions(1).ColorScaleCriteria(3).Value = 3
        .FormatConditions(1).ColorScaleCriteria(3).FormatColor.Color = 65535
        .Interior.Pattern = xlSolid
        .Interior.PatternColorIndex = xlAutomatic
        .Interior.ThemeColor = xlThemeColorDark1
        .Interior.TintAndShade = -0.149998474074526
        .Interior.PatternTintAndShade = 0
    End With
End Sub

Private Sub PositiveValue_level(ByVal column_target As Long, ByVal Dlig As Long)
    Dim MaPlage As Range
    Dim Col40T As Long, Col40B As Long, Col14T As Long, Col14B As Long
    Set MaPlage = Feuil2.Range(Feuil2.Cells(3, column_target), Feuil2.Cells(Dlig, column_target + 2))
    Select Case Range("HgltVar").Value
        Case "NONE"
            Col40T = RGB(0, 0, 0)
            Col40B = RGB(217, 217, 217)
            Col14T = RGB(0, 0, 0)
            Col14B = RGB(217, 217, 217)
        Case "High"
            Col40T = RGB(255, 255, 0)
            Col40B = RGB(255, 5, 5)
            Col14T = RGB(254, 5, 5)
            Col14B = RGB(255, 255, 0)
        Case "Medium"
            Col40T = RGB(255, 255, 0)
            Col40B = RGB(250, 95, 0)
            Col14T = RGB(0, 0, 0)
            Col14B = RGB(255, 238, 185)
        Case Else
            Col40T = RGB(0, 0, 0)
            Col40B = RGB(254, 186, 148)
            Col14T = RGB(0, 0, 0)
            Col14B = RGB(255, 238, 185)
    End Select
    With MaPlage
        .HorizontalAlignment = xlCenter
        .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:="40"
        .FormatConditions(1).Font.Bold = True
        .FormatConditions(1).Font.Color = Col40T
        .FormatConditions(1).Interior.Color = Col40B
        .FormatConditions.Add Type:=xlCellValue, Operator:=xlGreater, Formula1:="0"
        .FormatConditions(2).Font.Bold = True
        .FormatConditions(2).Font.Color = Col14T
        .FormatConditions(2).Interior.Color = Col14B
    End With
End Sub

Private Sub Cond_format(ByVal Dlig As Long, ByVal max_y As Long, ByVal EngInd As Long, ByVal ProdSts As Long, ByVal PoInd As Long, ByVal RTSInd As Long, ByVal PuInd As Long, ByVal DTTInd As Long, ByVal POL As Long, ByVal REQL As Long, ByVal EAD As Long, ByVal Colorlines As Boolean)
    Dim MaPlage2 As Range
    Dim uv As UniqueValues
    Dim x As String

    Set MaPlage2 = Feuil2.Range(Feuil2.Cells(3, POL), Feuil2.Cells(Dlig, POL))
    Set uv = MaPlage2.FormatConditions.AddUniqueValues
    uv.DupeUnique = xlDuplicate
    uv.Interior.Color = RGB(0, 204, 255)
    uv.Font.Color = vbYellow
    Set MaPlage2 = Feuil2.Range(Feuil2.Cells(3, REQL), Feuil2.Cells(Dlig, REQL))
    Set uv = MaPlage2.FormatConditions.AddUniqueValues
    uv.DupeUnique = xlDuplicate
    uv.Interior.Color = RGB(0, 204, 255)
    uv.Font.Color = vbYellow
    If Colorlines Then
        Set MaPlage2 = Feuil2.Range(Feuil2.Cells(3, 1), Feuil2.Cells(Dlig, max_y))
        With MaPlage2.FormatConditions
            x = Split(Feuil2.Cells(3, DTTInd).Address, "$")(1)
            .Add Type:=xlExpression, Formula1:="=($" & x & "3=""A"")"
            .Item(.Count).Interior.Color = RGB(204, 204, 255)
            x = Split(Feuil2.Cells(3, PuInd).Address, "$")(1)
            .Add Type:=xlExpression, Formula1:="=($" & x & "3=""A"")"
            .Item(.Count).Interior.Color = RGB(189, 215, 238)
            x = Split(Feuil2.Cells(3, RTSInd).Address, "$")(1)
            .Add Type:=xlExpression, Formula1:="=($" & x & "3=""A"")"
            .Item(.Count).Interior.Color = RGB(198, 224, 180)
            x = Split(Feuil2.Cells(3, PoInd).Address, "$")(1)
            .Add Type:=xlExpression, Formula1:="=($" & x & "3=""A"")"
            .Item(.Count).Interior.Color = RGB(255, 230, 153)
            x = Split(Feuil2.Cells(3, EngInd).Address, "$")(1)
            .Add Type:=xlExpression, Formula1:="=($" & x & "3=""A"")"
            .Item(.Count).Interior.Color = RGB(248, 203, 173)
        End With
    End If
End Sub

Private Sub Dates_layout(ByVal column_target As Long, ByVal Dlig As Long)
    With Feuil2.Range(Feuil2.Cells(3, column_target), Feuil2.Cells(Dlig, column_target))
        .NumberFormat = "dd-[$-409]mmm-yy"
        .Interior.Pattern = xlSolid
        .Interior.PatternColorIndex = xlAutomatic
        .Interior.ThemeColor = xlThemeColorDark1
        .Interior.TintAndShade = -0.149998474074526
        .Interior.PatternTintAndShade = 0
    End With
End Sub

Private Sub Dates_layout_white(ByVal column_target As Long, ByVal Dlig As Long)
    Feuil2.Range(Feuil2.Cells(3, column_target), Feuil2.Cells(Dlig, column_target)).NumberFormat = "dd-[$-409]mmm-yy"
End Sub

Private Sub common_layout(ByVal column_target As Long, ByVal Dlig As Long)
    With Feuil2.Range(Feuil2.Cells(3, column_target), Feuil2.Cells(Dlig, column_target)).Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = -0.149998474074526
        .PatternTintAndShade = 0
    End With
End Sub

Private Sub white_layout(ByVal column_target As Long, ByVal Dlig As Long)
    With Feuil2.Range(Feuil2.Cells(3, column_target), Feuil2.Cells(Dlig, column_target)).Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .ThemeColor = xlThemeColorDark1
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
End Sub

Private Sub Center_cell(ByVal column_target As Long, ByVal Dlig As Long)
    Feuil2.Range(Feuil2.Cells(3, column_target), Feuil2.Cells(Dlig, column_target)).HorizontalAlignment = xlCenter
End Sub

Private Sub number_layout(ByVal column_target As Long, ByVal Dlig As Long)
    With Feuil2.Range(Feuil2.Cells(3, column_target), Feuil2.Cells(Dlig, column_target))
        .NumberFormat = "#,##0"
        .HorizontalAlignment = xlRight
    End With
End Sub

Function ColumnLetter(ws As Worksheet, colNum As Long) As String
    If colNum < 1 Or colNum > ws.Columns.Count Then
        ColumnLetter = ""
        Exit Function
    End If
    ColumnLetter = Split(ws.Cells(1, colNum).Address(False, False), "1")(0)
End Function

Sub all_layout(ByVal Dlig As Long, ByVal max_y As Long, ByVal IPS_col As Long, ByVal MLI_Col As Long, ByVal BlockT_Col As Long)
    Dim ws As Worksheet
    Dim ColID_IPS_col As String, ColID_MLI_Col As String, ColID_BlockT_Col As String

    Set ws = Feuil2

    With ws.Range(ws.Cells(3, 1), ws.Cells(Dlig, max_y))
        .Borders(xlDiagonalDown).LineStyle = xlNone
        .Borders(xlDiagonalUp).LineStyle = xlNone
        With .Borders(xlEdgeLeft)
            .LineStyle = xlDot
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeTop)
            .LineStyle = xlDot
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeBottom)
            .LineStyle = xlDot
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlEdgeRight)
            .LineStyle = xlDot
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlInsideVertical)
            .LineStyle = xlDot
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
        With .Borders(xlInsideHorizontal)
            .LineStyle = xlDot
            .ColorIndex = xlAutomatic
            .TintAndShade = 0
            .Weight = xlThin
        End With
    End With

    With ws.Rows("3:" & Dlig)
        .VerticalAlignment = xlTop
        .WrapText = True
        .Font.Size = 10
        .RowHeight = 25.4
    End With

    If Not ws.AutoFilterMode Then
        ws.Rows(2).AutoFilter
    End If

    On Error Resume Next
    ws.Sort.SortFields.Clear
    On Error GoTo 0

    ColID_IPS_col = ColumnLetter(ws, IPS_col)
    ColID_MLI_Col = ColumnLetter(ws, MLI_Col)
    ColID_BlockT_Col = ColumnLetter(ws, BlockT_Col)

    ws.Sort.SortFields.Add2 Key:=ws.Range(ColID_IPS_col & "3:" & ColID_IPS_col & Dlig), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal
    ws.Sort.SortFields.Add2 Key:=ws.Range(ColID_MLI_Col & "3:" & ColID_MLI_Col & Dlig), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
    ws.Sort.SortFields.Add2 Key:=ws.Range(ColID_BlockT_Col & "3:" & ColID_BlockT_Col & Dlig), _
        SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortNormal

    With ws.Sort
        .SetRange ws.Range(ws.Cells(3, 1), ws.Cells(Dlig, max_y))
        .Header = xlNo
        .MatchCase = False
        .Orientation = xlTopToBottom
        .SortMethod = xlPinYin
        .Apply
    End With

    ws.Range(ColID_MLI_Col & "3:" & ColID_MLI_Col & Dlig).Font.Bold = True
    ws.Range(ColID_IPS_col & "3:" & ColID_IPS_col & Dlig).Font.Bold = True
    ws.Range(ColID_BlockT_Col & "3:" & ColID_BlockT_Col & Dlig).Font.Bold = True
End Sub

' =============================
' FUNÇÕES DE LIMPEZA E CONTROLE
' =============================

Private Sub ClearFilters()
    On Error Resume Next
    Feuil2.ShowAllData
    On Error GoTo 0
End Sub

Private Sub ClearSheet1(ByVal lastRow As Long, ByVal lastCol As Long)
    On Error Resume Next
    If lastRow > 1 Then
        Feuil1.Range(Feuil1.Cells(2, 1), Feuil1.Cells(lastRow, lastCol)).ClearContents
    End If
    On Error GoTo 0
End Sub

Private Sub ClearSheet2(ByVal lastRow As Long, ByVal lastCol As Long)
    Dim headerRange As Range
    Dim currentCell As Range
    On Error Resume Next
    If lastRow > 2 Then
        Feuil2.Rows("4:" & lastRow).Delete Shift:=xlUp
        Feuil2.Rows("3:3").FormatConditions.Delete
        Set headerRange = Feuil2.Range(Feuil2.Cells(3, 1), Feuil2.Cells(3, lastCol))
        headerRange.SpecialCells(xlCellTypeConstants, 23).ClearContents
        For Each currentCell In headerRange
            If Not currentCell.HasFormula Then
                currentCell.ClearFormats
                currentCell.FormatConditions.Delete
            End If
        Next currentCell
    End If
    Feuil2.Range(Feuil2.Cells(3, 1), Feuil2.Cells(lastRow + 1, 1)).ClearContents
    On Error GoTo 0
End Sub

Private Sub ClearSheet3(ByVal lastRowSheet3 As Long, ByVal lastColLetter As String)
    On Error Resume Next
    If lastRowSheet3 > 1 Then
        Feuil3.Range("A2:" & lastColLetter & lastRowSheet3).ClearContents
    End If
    Feuil3.Range("M1:M1").ClearContents
    Feuil3.Range("M2:M2").ClearContents
    Feuil3.Range("P1:P1").ClearContents
    On Error GoTo 0
End Sub

Sub ClearAllSheets()
    Dim lastRowSheet1 As Long, lastRowSheet3 As Long
    Dim lastColSheet1 As Long, lastColSheet2 As Long
    Dim lastColLetter As String
    Application.ScreenUpdating = False
    Application.Calculation = xlManual
    Application.EnableEvents = False
    Application.DisplayAlerts = False
    Feuil1.Unprotect
    lastRowSheet1 = Feuil1.Range("A" & Feuil1.Rows.Count).End(xlUp).Row
    lastColLetter = Split(Feuil1.UsedRange.Address, "$")(3)
    lastColSheet1 = Feuil1.Range(lastColLetter & "1").Column
    ClearSheet1 lastRowSheet1, lastColSheet1
    ClearFilters
    lastColLetter = Split(Feuil2.UsedRange.Address, "$")(3)
    lastColSheet2 = Feuil2.Range(lastColLetter & "1").Column
    ClearSheet2 lastRowSheet1, lastColSheet2
    Feuil1.Protect
    Feuil3.Unprotect
    lastRowSheet3 = Feuil3.Range("A" & Feuil3.Rows.Count).End(xlUp).Row
    lastColLetter = "J"
    ClearSheet3 lastRowSheet3, lastColLetter
    Feuil3.Protect
    Feuil3.Select
    Application.ScreenUpdating = True
    Application.Calculation = xlAutomatic
    Application.EnableEvents = True
    Application.DisplayAlerts = True
End Sub

' =============================
' FUNÇÃO DE COMPARAÇÃO FEUIL1/FEUIL2
' E FILLDOWN ROBUSTO PARA CÉLULAS MESCLADAS
' =============================

Private Sub MatchAndAlignFeuil2WithFeuil1()
    Dim ws1 As Worksheet, ws2 As Worksheet
    Dim arrHeaders1 As Variant, arrHeaders2 As Variant
    Dim dictHeader1 As Object
    Dim arrToDelete As Collection
    Dim i As Long, j As Long, idxColFeuil1 As Long
    Dim lastRowFeuil1 As Long, lastColFeuil1 As Long
    Dim lastRowFeuil2 As Long, lastColFeuil2 As Long
    Dim startPasteRowFeuil2 As Long
    Dim rgbYellow As Long
    Dim formulaCell As Range
    Dim lastDataRow As Long
    Dim header2 As String

    Set ws1 = Feuil1
    Set ws2 = Feuil2
    rgbYellow = RGB(255, 255, 0)

    lastRowFeuil1 = ws1.Cells(ws1.Rows.Count, 1).End(xlUp).Row
    lastColFeuil1 = ws1.Cells(1, ws1.Columns.Count).End(xlToLeft).Column
    lastRowFeuil2 = ws2.Cells(ws2.Rows.Count, 1).End(xlUp).Row
    lastColFeuil2 = ws2.Cells(2, ws2.Columns.Count).End(xlToLeft).Column

    ' Ajuste dinâmico do início da colagem
    If lastRowFeuil1 <= 1 Then
        startPasteRowFeuil2 = 2
    Else
        startPasteRowFeuil2 = 3
    End If

    arrHeaders1 = ws1.Range(ws1.Cells(1, 1), ws1.Cells(1, lastColFeuil1)).Value2
    arrHeaders2 = ws2.Range(ws2.Cells(2, 1), ws2.Cells(2, lastColFeuil2)).Value2

    Set dictHeader1 = CreateObject("Scripting.Dictionary")
    For i = 1 To lastColFeuil1
        dictHeader1(Trim$(CStr(arrHeaders1(1, i)))) = i
    Next i

    Set arrToDelete = New Collection

    For j = lastColFeuil2 To 1 Step -1
        header2 = Trim$(CStr(arrHeaders2(1, j)))
        If header2 <> "" And dictHeader1.Exists(header2) Then
            idxColFeuil1 = dictHeader1(header2)
            ws1.Range(ws1.Cells(2, idxColFeuil1), ws1.Cells(lastRowFeuil1, idxColFeuil1)).Copy
            ws2.Cells(startPasteRowFeuil2, j).PasteSpecial Paste:=xlPasteValues
            Application.CutCopyMode = False
        Else
            If ws2.Cells(2, j).Interior.Color <> rgbYellow Then
                arrToDelete.Add j
            Else
                Set formulaCell = ws2.Cells(3, j)
                If formulaCell.HasFormula Then
                    lastDataRow = ws2.Cells(ws2.Rows.Count, 1).End(xlUp).Row
                    SafeAutoFill_Headers formulaCell, j, lastDataRow
                End If
            End If
        End If
    Next j

    For i = arrToDelete.Count To 1 Step -1
        ws2.Columns(arrToDelete(i)).Delete
    Next i
End Sub

Private Sub SafeAutoFill_Headers(ByVal formulaCell As Range, ByVal targetColumn As Long, ByVal lastRow As Long)
    Dim ws As Worksheet
    Dim i As Long
    Dim formulaText As String
    Set ws = formulaCell.Worksheet
    formulaText = formulaCell.Formula
    For i = formulaCell.Row + 1 To lastRow
        With ws.Cells(i, targetColumn)
            If Not .MergeCells Then
                .Formula = formulaText
            End If
        End With
    Next i
End Sub

' =============================
' IMPORTAÇÃO DE DADOS E FORMATO
' =============================

Sub Template_Perso2()
    Dim lastRow As Long, lastCol As Long
    Dim max As Long, max_y As Long
    Dim filePath As Variant
    Dim x As String, y As String, importedBookName As String
    Dim wsDestination As Worksheet, wsSource As Worksheet
    Dim wbSource As Workbook
    Dim i As Long
    Dim headerSource As Variant, headerDestination As Variant
    Dim sourceRows As Long, sourceCols As Long
    Dim twoColoredRows As Boolean, firstRowColored As Boolean
    Dim defaultWhiteColor As Long
    Dim ITDESC As Integer
    Dim numDataRows As Long
    Dim areEqual As Boolean
    Dim Dlig As Long
    Dim IPS_col As Long, BlockT_Col As Long, MLI_Col As Long
    Dim EngInd As Long, PoInd As Long, RTSInd As Long, PuInd As Long, DTTInd As Long
    Dim ProdSts As Long, POL As Long, REQL As Long, EAD As Long
    Dim y2 As Long

    Call ClearAllSheets

    Application.ScreenUpdating = False
    Application.Calculation = xlManual
    Application.EnableEvents = False
    Application.DisplayAlerts = False

    Set wsDestination = Feuil1
    wsDestination.Unprotect

    filePath = Application.GetOpenFilename()
    If filePath = False Then GoTo Finalize

    Set wbSource = Workbooks.Open(filePath)
    Set wsSource = wbSource.Sheets(1)
    importedBookName = wbSource.name

    sourceRows = wsSource.Cells(wsSource.Rows.Count, 1).End(xlUp).Row
    sourceCols = wsSource.Cells(2, wsSource.Columns.Count).End(xlToLeft).Column
    defaultWhiteColor = RGB(255, 255, 255)

    twoColoredRows = False
    firstRowColored = False
    If wsSource.Cells(1, 1).Interior.Color <> defaultWhiteColor Then
        If wsSource.Cells(2, 1).Interior.Color <> defaultWhiteColor Then
            twoColoredRows = True
        Else
            firstRowColored = True
        End If
    End If

    If twoColoredRows Then
        lastRow = wsSource.Range("A" & wsSource.Rows.Count).End(xlUp).Row
        lastCol = wsSource.Cells(2, wsSource.Columns.Count).End(xlToLeft).Column
        x = Split(wsSource.Range(wsSource.Cells(2, 1), wsSource.Cells(2, lastCol)).Address, "$")(3)
        wsSource.Range("A3:" & x & lastRow).Copy
        wsDestination.Range("A2").PasteSpecial Paste:=xlPasteValues, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
        wbSource.Application.CutCopyMode = False
        wbSource.Close
        x = Split(wsDestination.UsedRange.Address, "$")(3)
        max = CLng(wsDestination.Range(x & "1").Column)
        y = Split(Feuil2.UsedRange.Address, "$")(3)
        max_y = CLng(Feuil2.Range(y & "1").Column)
        wsDestination.Parent.Worksheets(wsDestination.name).Sort.SortFields.Clear
        wsDestination.Parent.Worksheets(wsDestination.name).Sort.SortFields.Add2 _
            Key:=wsDestination.Range("A2:A" & lastRow - 1), SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
        With wsDestination.Parent.Worksheets(wsDestination.name).Sort
            .SetRange wsDestination.Range("A2:" & x & lastRow - 1)
            .Header = xlNo
            .MatchCase = False
            .Orientation = xlTopToBottom
            .SortMethod = xlPinYin
            .Apply
        End With
        ITDESC = 1
        lastRow = wsDestination.Range("A" & wsDestination.Rows.Count).End(xlUp).Row + 1
        Call MatchAndAlignFeuil2WithFeuil1
        GoTo Finalize
    End If

    If firstRowColored Then
        headerSource = wsSource.Range(wsSource.Cells(1, 1), wsSource.Cells(1, sourceCols)).Value
        headerDestination = wsDestination.Range(wsDestination.Cells(1, 1), wsDestination.Cells(1, sourceCols)).Value
        areEqual = True
        For i = 1 To sourceCols
            If Trim(CStr(headerSource(1, i))) <> Trim(CStr(headerDestination(1, i))) Then
                areEqual = False
                Exit For
            End If
        Next i
        If areEqual Then
            numDataRows = sourceRows - 1
            If numDataRows <= 0 Then
                MsgBox "Arquivo contém apenas cabeçalhos. Nenhum dado a processar.", vbExclamation
                GoTo Finalize
            End If
            wsDestination.Range(wsDestination.Cells(2, 1), wsDestination.Cells(1 + numDataRows, sourceCols)).Value = _
                wsSource.Range(wsSource.Cells(2, 1), wsSource.Cells(sourceRows, sourceCols)).Value
            wbSource.Close
            x = Split(wsDestination.UsedRange.Address, "$")(3)
            max = CLng(wsDestination.Range(x & "1").Column)
            y = Split(Feuil2.UsedRange.Address, "$")(3)
            max_y = CLng(Feuil2.Range(y & "1").Column)
            wsDestination.Parent.Worksheets(wsDestination.name).Sort.SortFields.Clear
            wsDestination.Parent.Worksheets(wsDestination.name).Sort.SortFields.Add2 _
                Key:=wsDestination.Range("A2:A" & wsDestination.Cells(wsDestination.Rows.Count, "A").End(xlUp).Row - 1), _
                SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
            With wsDestination.Parent.Worksheets(wsDestination.name).Sort
                .SetRange wsDestination.Range("A2:" & x & wsDestination.Cells(wsDestination.Rows.Count, "A").End(xlUp).Row - 1)
                .Header = xlNo
                .MatchCase = False
                .Orientation = xlTopToBottom
                .SortMethod = xlPinYin
                .Apply
            End With
            ITDESC = 1
            lastRow = wsDestination.Range("A" & wsDestination.Rows.Count).End(xlUp).Row + 1
            Call MatchAndAlignFeuil2WithFeuil1
            GoTo Finalize
        Else
            wsSource.UsedRange.Copy
            wsDestination.Range("A1").PasteSpecial Paste:=xlPasteAll
            Application.CutCopyMode = False
            wbSource.Close
            x = Split(wsDestination.UsedRange.Address, "$")(3)
            max = CLng(wsDestination.Range(x & "1").Column)
            y = Split(Feuil2.UsedRange.Address, "$")(3)
            max_y = CLng(Feuil2.Range(y & "1").Column)
            wsDestination.Parent.Worksheets(wsDestination.name).Sort.SortFields.Clear
            wsDestination.Parent.Worksheets(wsDestination.name).Sort.SortFields.Add2 _
                Key:=wsDestination.Range("A2:A" & wsDestination.Cells(wsDestination.Rows.Count, "A").End(xlUp).Row - 1), _
                SortOn:=xlSortOnValues, Order:=xlAscending, DataOption:=xlSortTextAsNumbers
            With wsDestination.Parent.Worksheets(wsDestination.name).Sort
                .SetRange wsDestination.Range("A2:" & x & wsDestination.Cells(wsDestination.Rows.Count, "A").End(xlUp).Row - 1)
                .Header = xlNo
                .MatchCase = False
                .Orientation = xlTopToBottom
                .SortMethod = xlPinYin
                .Apply
            End With
            ITDESC = 1
            lastRow = wsDestination.Range("A" & wsDestination.Rows.Count).End(xlUp).Row + 1
            Call MatchAndAlignFeuil2WithFeuil1
            GoTo Finalize
        End If
    End If

Finalize:
    Dlig = Feuil2.Cells(Feuil2.Rows.Count, 1).End(xlUp).Row
    max_y = Feuil2.Cells(2, Feuil2.Columns.Count).End(xlToLeft).Column
    For y2 = 1 To max_y
        Select Case Feuil2.Cells(2, y2).Value
            Case "IPS": IPS_col = y2
            Case "Block Train": BlockT_Col = y2
            Case "MLI": MLI_Col = y2
            Case "ENG IND": EngInd = y2
            Case "PO PLACE IND": PoInd = y2
            Case "RTS IND": RTSInd = y2
            Case "PICKUP IND": PuInd = y2
            Case "DTT IND": DTTInd = y2
            Case "PART STATUS": ProdSts = y2
            Case "PO POLINE": POL = y2
            Case "REQUISITION": REQL = y2
            Case "ENG ADDED DELAY": EAD = y2
        End Select
    Next y2
    Call all_layout(Dlig, max_y, IPS_col, MLI_Col, BlockT_Col)
    Call Cond_format(Dlig, max_y, EngInd, ProdSts, PoInd, RTSInd, PuInd, DTTInd, POL, REQL, EAD, Sheets("PROJECT TEAM").Range("ColoredLines").Value = "YES")
    wsDestination.Protect
    wsDestination.Visible = xlSheetHidden
    Application.ScreenUpdating = True
    Application.Calculation = xlAutomatic
    Application.EnableEvents = True
    Application.DisplayAlerts = True
End Sub

